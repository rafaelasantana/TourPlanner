@using TourPlanner.Services
@inject TourService TourService
@page "/tours/edit"

<PageTitle>Edit Tour</PageTitle>

<CustomBodyContainerNarrow>
    <CustomBodyWrapperRounded>
        <CustomPageHeader Text="Edit Tour"/>

        <EditForm method="post" Model="@NewTour" OnValidSubmit="HandleValidSubmit" FormName="createTour" Enhance>

            <DataAnnotationsValidator/>
            <div class="row">

                <CustomWrapperLarge>
                    <label for="tourName" class="form-label">Name</label>
                    <InputText id="tourName" class="form-control" @bind-Value="NewTour.Name"/>
                    <ValidationMessage For="() => NewTour.Name" class="text-danger"></ValidationMessage>
                </CustomWrapperLarge>

                <CustomWrapperLarge>
                    <label for="tourTransportType">Transport Type</label>
                    <InputSelect id="tourTransportType" class="form-control" @bind-Value="@NewTour.TransportType">
                        @foreach (var type in Enum.GetValues(typeof(TransportType)))
                        {
                        <option value="@type">@type</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => NewTour.TransportType" class="text-danger"></ValidationMessage>
                </CustomWrapperLarge>

                <CustomWrapperSmall>
                    <label for="tourStartingPoint" class="form-label">Starting Point</label>
                    <InputText id="tourStartingPoint" class="form-control" @bind-Value="NewTour.Start"/>
                    <ValidationMessage For="() => NewTour.Start" class="text-danger"></ValidationMessage>
                </CustomWrapperSmall>

                <CustomWrapperSmall>
                    <label for="tourEndPoint" class="form-label">End Point</label>
                    <InputText id="tourEndPoint" class="form-control" @bind-Value="NewTour.End"/>
                    <ValidationMessage For="() => NewTour.End" class="text-danger"></ValidationMessage>
                </CustomWrapperSmall>

                <CustomWrapperLarge>
                    <label for="tourDescription" class="form-label">Description</label>
                    <InputTextArea id="tourDescription" class="form-control" @bind-Value="NewTour.Description"/>
                    <ValidationMessage For="() => NewTour.Description" class="text-danger"></ValidationMessage>
                </CustomWrapperLarge>
            </div>
            <ValidationSummary class="text-danger"/>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
            <div class="alert alert-danger" role="alert">
                @ErrorMessage
            </div>
            }
            <FormSubmitAndDangerButtons SubmitButtonText="Apply Changes" DangerButtonText="Delete Tour"></FormSubmitAndDangerButtons>

        </EditForm>
    </CustomBodyWrapperRounded>

</CustomBodyContainerNarrow>


@code {
[SupplyParameterFromForm]
public TourDTO NewTour { get; set; } = new();

private string? ErrorMessage { get; set; }

private async Task HandleValidSubmit()
{
var (createdTour, errorMessage) = await TourService.CreateTourAsync(NewTour);

if (createdTour != null)
{
Console.WriteLine("Tour created successfully. Tour ID: " + createdTour.Id);
}
else
{
Console.WriteLine("Failed to create the tour: " + errorMessage);
ErrorMessage = errorMessage;
}
}
}